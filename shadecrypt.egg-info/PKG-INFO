Metadata-Version: 2.4
Name: shadecrypt
Version: 0.1
Summary: A class oriented lightweight database with a cli wrapper for any device: store, update, copy, and remove structured data with a single command. Perfect for embedded devices, mobiles, devtools, and quick local services.
Author: Shade
Author-email: adesolasherifdeen3@gmail.com
License: GPL-3.0
Project-URL: GitHub, https://github.com/harkerbyte
Project-URL: Facebook, https://facebook.com/harkerbyte
Project-URL: Whatsapp, https://whatsapp.com/channel/0029Vb5f98Z90x2p6S1rhT0S
Project-URL: Youtube, https://youtube.com/@harkerbyte
Project-URL: Instagram, https://instagram.com/harkerbyte
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Topic :: Database :: Database Engines/Servers
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: license
Dynamic: project-url
Dynamic: requires-python
Dynamic: summary

# Shadecrypt  

![PyPI - Version](https://img.shields.io/pypi/v/shadecrypt?color=blue&label=PyPI)  
![PyPI - Downloads](https://img.shields.io/pypi/dm/shadecrypt?color=brightgreen)  
![License](https://img.shields.io/github/license/harkerbyte/shadecrypt?color=yellow)  
![Platform](https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows%20%7C%20android-lightgrey)  



üöÄ **Shadecrypt** is a lightweight, multipurpose **CLI + Python database server** ‚Äî small enough to run anywhere, yet powerful enough to manage structured data with speed and simplicity.  

Unlike traditional file-based CLIs, Shadecrypt works more like Redis:  

- You **initialize once** ‚Üí a background server process holds the live database in memory.  
- All future CLI commands (`put`, `get`, `update`, etc.) talk to that server via a local socket.  
- The server **automatically persists** data to a `.scdb` file, with optional write and backup controls.  

---

## ‚ú® Features

- **Class-oriented design** ‚Äî core database logic is in the `ShadeDB` class.  
- **Redis-like workflow** ‚Äî one live server handles all operations.  
- **Background persistence** ‚Äî in-memory with disk persistence.  
- **Portable** ‚Äî runs on Linux, macOS, Windows, Android (via Termux).  
- **Multipurpose CLI** ‚Äî simple commands: `init`, `use`, `put`, `get`, `update`, `copy`, `remove`, `ls`, `stop`.  
- **Config-aware** ‚Äî automatically tracks the ‚Äúcurrent‚Äù DB in `~/.shadecrypt/config.scdb`.  

---

## üîß Installation

```bash
pip install shadecrypt
```

After install, the `shadecrypt` command is available globally.  

---

## ‚ö° Quickstart (CLI)

### 1. Initialize a database  
Creates `./mydb.scdb`, starts the server, and sets it as default:  
```bash
shadecrypt init ./mydb.scdb True False
```

---

### 2. Insert data  
```bash
shadecrypt put alice '{"nickname": "Shade", "status": "active"}'
```

---

### 3. Fetch data  
```bash
shadecrypt get alice
# {"nickname": "Shade", "status": "active"}
```

---

### 4. Nested access  
```bash
shadecrypt get alice.nickname
# "Shade"
```

---

### 5. Update  
```bash
shadecrypt update alice '{"status": "inactive"}'
```

---

### 6. Copy & remove  
```bash
shadecrypt copy alice alice_backup
shadecrypt remove alice_backup
```

---

### 7. List keys  
```bash
shadecrypt ls
# ["alice"]
```

---

### 8. Switch database  
```bash
shadecrypt use ./backup.scdb
```

---

### 9. Stop server  
```bash
shadecrypt stop
```

---

## üìö Python API  

Shadecrypt can also be embedded directly into Python apps using the `ShadeDB` class.  

### üîß Initialize  
```python
from shadecrypt.core import ShadeDB

db = ShadeDB(
    file="./data.scdb",
    write=True,
    id=True,
    backup=False
)
```

**Parameters**  
- `file (str)` ‚Üí Path to `.scdb` file  
- `write (bool)` ‚Üí Persist changes to disk (default: `True`)  
- `id (bool)` ‚Üí Assign unique ID per entry (default: `True`)  
- `backup (bool)` ‚Üí Keep backup copy (default: `False`)  

---

### üõ†Ô∏è Key Methods  

```python
db.update(("alice", {"nickname": "Shade", "status": "active"}))   # Insert/update
db.get("alice")           # Fetch record
db.get("alice.nickname")  # Fetch nested value
db.get_context("alice")   # Get full dict
db.get_by_id(1)           # Fetch by ID
db.get_id("alice")        # Get ID of key
db.items()                # List all entries
db.import_dict({...})     # Import dictionary
db.export_dict()          # Export to dictionary
db.remove("alice")        # Delete entry
db.clear()                # Clear all
db.status()               # DB status
db.__performance__()      # Performance stats
```

---

## ‚ö° Example Workflow  

```python
from shadecrypt.core import ShadeDB

db = ShadeDB("./appdata.scdb", write=True)

# Insert
db.update(("alice", {"nickname": "Shade", "status": "active"}))

# Nested access
print(db.get("alice.nickname"))   # Shade

# Full context
print(db.get_context("alice"))    # {'nickname': 'Shade', 'status': 'active'}

# Export
print(db.export_dict())
```

---

## üìë Command & Method Reference  

| Command / Method         | Description |
|---------------------------|-------------|
| `init <file> <write> <backup>` | Initialize DB + server |
| `use <file>`             | Switch database |
| `put <key> <value>`      | Insert data |
| `get <key>`              | Fetch data (supports dot notation) |
| `update <key> <value>`   | Update existing record |
| `copy <src> <dest>`      | Duplicate key |
| `remove <key>`           | Delete entry |
| `ls`                     | List all keys |
| `stop`                   | Stop server |
| `update(item)`           | Insert/update via Python |
| `get(key)`               | Fetch record |
| `get_context(key)`       | Full dictionary view |
| `get_by_id(id)`          | Fetch by unique ID |
| `get_id(key)`            | Return ID of key |
| `items()`                | List all entries |
| `import_dict(dict)`      | Import bulk dict |
| `export_dict()`          | Export full dict |
| `remove(key)`            | Delete by key/ID |
| `clear()`                | Wipe database |
| `status()`               | DB status info |
| `__performance__()`      | Compile time & stats |

---



---

## üó∫Ô∏è Roadmap  

### ‚úÖ v0.1 (Current Beta)  
- CLI server with `init`, `put`, `get`, `update`, `copy`, `remove`, `ls`, `stop`  
- Dot-notation for nested values (`alice.nickname`)  
- Config file (`~/.shadecrypt/config.scdb`) for default DB tracking  
- Python API (`ShadeDB` class)  
- Read full doc
---

### üöÄ vPENDING
- **Profiles system** ‚Üí `shadecrypt profile dev/prod/test`  
- **Export/import** via CLI (`shadecrypt export mydb.scdb`)  
- **Improved backup rotation** (timestamps or versioned backups)  
- **D extended docs**  
- **And MORE!** (Big surprises)
---

### ‚ö° vPENDING  
- **Event hooks** (`before_update`, `after_remove`, etc.) for Python API  
- **Access control** (basic auth/keys for multi-user environments)  
- **Better logging** ‚Üí structured logs for server mode  
- **Performance metrics** exposed in CLI (`shadecrypt stats`)  
- **And MORE!** (Big surprises)
---

### üîÆ Future (Ideas)  
- **Remote mode** ‚Üí optional TCP listener so Shadecrypt can be queried from another device (like Redis-lite networking)  
- **Replication/Sync** ‚Üí lightweight push/pull sync between devices  
- **GUI Client** (web-based dashboard for browsing `.scdb` files)  
- **Plugin system** ‚Üí user-defined operations via Python modules  


## üåç Connect  

- **GitHub:** [harkerbyte](https://github.com/harkerbyte)  
- **FB:** [facebook.com/harkerbyte](https://facebook.com/harkerbyte)  
- **Instagram:** [instagram.com/harkerbyte](https://instagram.com/harkerbyte)  
- **Community (WhatsApp):** [Join Here](https://chat.whatsapp.com/GuppqwKhp4H7OCaLWcOz40?mode=ac_t)  
